define("Setup",["underscore"],function(n){return function(t){return n.isFunction(t)?t():t}}),define("validate",["underscore"],function(n){return function(t){if(n.has(t,"Validation")){if(!1===n.isArray(t.Validation))throw{message:"Error: Validation type was not array!"};if(!1===n.every(t.Validation,function(t){return n.isFunction(t)})&&!1===n.isEmpty(t.Validation))throw{message:"Error: Validation element type was not function!"};return n.every(t.Validation,function(n){return n(t.Data)})}}}),define("Assertion_Validation",["underscore"],function(n){return[function(t){if(!1===n.has(t,"Result"))throw{Message:"Error: No Result was given!"};if(!1===n.has(t,"ExpectedOutput"))throw{Message:"Error: No ExpectedOutput was given!"};return!0}]}),define("Assertion",["underscore","validate","Assertion_Validation"],function(n,t,e){return function(i){return t({Validation:e,Data:i}),n.has(i,"ComparisonFunction")?i.ComparisonFunction(i):JSON.stringify(i.Result)===JSON.stringify(i.ExpectedOutput)}}),define("Debug",[],function(){return function(n){!0===n.Debug&&(console.log("Result: "+JSON.stringify(n.Result)),console.log("Expected: "+JSON.stringify(n.ExpectedOutput)))}}),define("Action",["log"],function(n){return function(t){try{t.Result=t.Function(t.Input)}catch(e){if(!t.ExceptionTest)throw n(JSON.stringify(e)),{Message:"UnexpectedError"};t.Comparator={Object:!0},t.Result=e}finally{return t.Result}}}),define("Test",["Setup","Assertion","Debug","log","Action"],function(n,t,e,i,r){return function(i){return{Name:i.Name,Run:function(){return i.Input=n(i.Input),i.Result=r(i),e(i),t(i)}}}});