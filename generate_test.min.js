define("validate",["underscore","log"],function(t,n){return function(n){if(t.has(n,"Validation")){if(!1===t.isArray(n.Validation))throw{message:"Error: Validation type was not array!"};if(!1===t.every(n.Validation,function(n){return t.isFunction(n)})&&!1===t.isEmpty(n.Validation))throw{message:"Error: Validation element type was not function!"};return t.every(n.Validation,function(t){return t(n.Data)})}}}),define("xGenerateTestValidation",["underscore","log"],function(t,n){return[function(n){if(!1===t.has(n,"Name"))throw{message:"Error: Input did not have a Name!"};if(!1===t.isString(n.Name))throw{message:"Error: Input name type was not string!"};return!0},function(n){if(!1===t.has(n,"Input"))throw{message:"Error: Input did not have an Input!"};return!0},function(n){if(!1===t.has(n,"Function"))throw{message:"Error: Input did not have a Function!"};if(!1===t.isFunction(n.Function))throw{message:"Error: Input function type was not function!"};return!0},function(n){if(!1===t.has(n,"ExpectedOutput"))throw{message:"Error: Input did not have an ExpectedOutput!"}}]}),define("Setup",["underscore"],function(t){return function(n){return t.isFunction(n)?n():n}}),define("bIsObjectEqual",[],function(){function t(t,n){var e=JSON.stringify(t),r=JSON.stringify(n),i=!0;if(e.length==r.length)for(var u=0;u<e.length;u++)e[u]!==r[u]&&(i=!1);else i=!1;return i}return t}),define("Assertion",["underscore","bIsObjectEqual"],function(t,n){return function(e){return t.has(e,"ComparisonFunction")?e.ComparisonFunction(e):t.has(e,"Comparator")&&t.has(e.Comparator,"Object")&&!0===e.Comparator.Object?n(e.Result,e.ExpectedOutput):e.Result===e.ExpectedOutput}}),define("Debug",["log","underscore"],function(t,n){return function(e){!0===e.Debug&&(n.has(e,"Comparator")&&n.has(e.Comparator,"Object")&&!0===e.Comparator.Object?(t("Result: "+JSON.stringify(e.Result)),t("Expected: "+JSON.stringify(e.ExpectedOutput))):(t("Result: "+e.Result),t("Expected: "+e.ExpectedOutput)))}}),define("Test",["Setup","Assertion","Debug"],function(t,n,e){return function(r){return{Name:r.Name,Run:function(){return r.Input=t(r.Input),r.Result=r.Function(r.Input),e(r),n(r)}}}}),define("xGenerateTest",["log","validate","xGenerateTestValidation","Test"],function(t,n,e,r){return function(t){return n({Data:t,Validation:e}),r(t)}});