define("xGenerateTestValidation",["underscore","log"],function(t,n){return[function(n){if(!1===t.has(n,"Name"))throw{message:"Error: Input did not have a Name!"};if(!1===t.isString(n.Name))throw{message:"Error: Input name type was not string!"};return!0},function(n){if(!1===t.has(n,"Input"))throw{message:"Error: Input did not have an Input!"};return!0},function(n){if(!1===t.has(n,"Function"))throw{message:"Error: Input did not have a Function!"};if(!1===t.isFunction(n.Function))throw{message:"Error: Input function type was not function!"};return!0},function(n){if(!1===t.has(n,"ExpectedOutput"))throw{message:"Error: Input did not have an ExpectedOutput!"}}]}),define("Setup",["underscore"],function(t){return function(n){return t.isFunction(n)?n():n}}),define("validate",["underscore"],function(t){return function(n){if(t.has(n,"Validation")){if(!1===t.isArray(n.Validation))throw{message:"Error: Validation type was not array!"};if(!1===t.every(n.Validation,function(n){return t.isFunction(n)})&&!1===t.isEmpty(n.Validation))throw{message:"Error: Validation element type was not function!"};return t.every(n.Validation,function(t){return t(n.Data)})}}}),define("Assertion_Validation",["underscore"],function(t){return[function(n){if(!1===t.has(n,"Result"))throw{Message:"Error: No Result was given!"};if(!1===t.has(n,"ExpectedOutput"))throw{Message:"Error: No ExpectedOutput was given!"};return!0}]}),define("Assertion",["underscore","validate","Assertion_Validation"],function(t,n,e){return function(r){return n({Validation:e,Data:r}),t.has(r,"ComparisonFunction")?r.ComparisonFunction(r):JSON.stringify(r.Result)===JSON.stringify(r.ExpectedOutput)}}),define("Debug",[],function(){return function(t){!0===t.Debug&&(console.log("Result: "+JSON.stringify(t.Result)),console.log("Expected: "+JSON.stringify(t.ExpectedOutput)))}}),define("Action",["log"],function(t){return function(n){try{n.Result=n.Function(n.Input)}catch(e){if(!n.ExceptionTest)throw t(JSON.stringify(e)),{Message:"UnexpectedError"};n.Comparator={Object:!0},n.Result=e}finally{return n.Result}}}),define("Test",["Setup","Assertion","Debug","log","Action"],function(t,n,e,r,i){return function(r){return{Name:r.Name,Run:function(){return r.Input=t(r.Input),r.Result=i(r),e(r),n(r)}}}}),define("xGenerateTest",["log","validate","xGenerateTestValidation","Test"],function(t,n,e,r){return function(t){return n({Data:t,Validation:e}),r(t)}});